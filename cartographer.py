"""
Cartographer class
Takes   - a model
        - a dataset
        - a loss function

Returns a map of the loss landscape in the parameter space around the model's current parameters (location).
Since the parameter space is so high dimensional, the cartographer resticts itself to a few loss profiles measured in a few directions.
The directions are randomly chosen unless otherwise specified.

The resolution of the profiles is logarithmic in the distance from the current location.
This allows the cartographer to perform a multi-scale analysis of the loss landscape.
In addition to the profiles, the cartographer also performs a roughness analysis of the loss landscape.
For each point on the profile, it measures the roughness at that scale by way of the coastline paradox.
"""

from torch import nn
from torch.utils.data import DataLoader
from torch.nn.modules.loss import _Loss
from pandas import DataFrame

class Cartographer:
    def __init__(self, model: nn.Module, dataloader: DataLoader, loss_function: _Loss, directions: int = 3, scales: int = 3):
        self.center = model
        self.dataloader = dataloader
        self.loss_function = loss_function
        self.directions = directions
        self.scales = scales
        
        # check there is a device available
        if torch.cuda.is_available():
            self.device = torch.device('cuda')
        else:
            self.device = torch.device('cpu')
        
        # move everything to the device
        self.center.to(self.device)
        self.loss_function.to(self.device)

        directions = self.generate_directions()
        locations = self.generate_locations()

    def generate_distances(self):
        """
        Generate how far to step along the various directions.
        Each step is twice as large as the previous.
        Different step sizes for different directions, to avoid artefacts of hitting special frequencies in the model.

        Returns a dataframe with the distances for each direction.
        Dimensions: (scales, directions)
        """
        pass
    
    def generate_directions(self):
        """
        Generates a set of random, normalised directions in the parameter space.
        TODO: Add the option to specify the directions, setting certain parameter groups to zero.

        Returns a dataframe with the directions.
        Dimensions: (directions)
        """
        pass
    
    def generate_locations(self):
        """
        Generates the locations in parameter space at which the loss will be measured, based on the directions.
        The locations are generated by stepping along the directions, with the step size determined by the scale.

        Returns a dataframe with the locations.
        Dimensions: (scales, directions)
        """
        pass

    def measure_loss(self):
        """
        Measures the loss at all location, including the center.
        Evaluates in parallel on devide using torch.jit.fork.

        Returns a dataframe with the loss profiles.
        Dimensions: (scales+1, directions) (scales+1 because we include the center)
        """
        pass

    def measure_roughness(self):
        """
        Measures the roughness for all triples of points on the loss profile.
        Consider you measure the following points: 
        A = (a,loss(a))
        B = (b,loss(b))
        C = (c,loss(c))

        a,b and c are spaced equally in parameter space:
            
           L|                B
           O|                |           C
           S|    A           |           |
           S|____|___________|___________|___
                    Parameter Space
        We can now define "roughness" at the scale of dist(a,b) by measuring how much B deviates from the straight line between A and C.
        The metric we will use is inspired by the coastline paradox:
        We will measure the length of the curve formed by the path ABC and devide it by the straight line distance from A to C.
        This ratio is what we will call the roughness at the scale of ~dist(a,b).

        Since the predecessor of every point is at half the distance to the center, we can calculate the roughness for all triples of points in parallel.

        Returns a dataframe with the roughness at each scale, in each direction.
        Dimensions: (scales-1, directions) (scales-1, since no roughness can be calculated for the start and end points.)
        """
        pass

    def plot_loss(self):
        """
        Plots the loss landscape given by the loss profiles dataframe.
        """
        pass

    def plot_roughness(self):
        """
        Plots the roughness at different scales for multiple directions, as contained in the roughness dataframe.
        """
        pass
        